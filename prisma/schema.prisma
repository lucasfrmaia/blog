// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum PostStatus {
  ACTTIVE
  DELETED
}

model Role {
  id          Int   @id @default(autoincrement())
  name        String   @unique
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
}

model User {
  id        String @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  salt      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roleId    Int

  role      Role @relation(fields: [roleId], references: [id])  
  
  posts     Post[]
  comments  Comment[]
  favorites Post[] @relation("favorites")
  likePost LikePost[]
}

model Category {
  id          String @id @default(uuid())
  name        String @unique
  color       String
  createdAt   DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  description String @default("")

  posts Post[]
}

model Post {
  id          String @id @default(uuid())
  title       String
  description String
  content     String
  img         String
  views       Int @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    String
  status      PostStatus
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)

  User User[] @relation("favorites")
  categories    Category[] 
  comments    Comment[]
  LikePost LikePost[]
}

model LikePost {
   id         Int @id @default(autoincrement())
   postId     String
   userId     String

   post      Post @relation(fields: [postId], references: [id], onDelete: Cascade)
   user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent_id String? // Torna o campo opcional
  userId            String
  postId            String
  edited            Boolean @default(false)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent   Comment?  @relation("CommentToReplies", fields: [parent_id], references: [id], onDelete: Cascade)
  replies  Comment[] @relation("CommentToReplies")
}

